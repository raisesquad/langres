[project]
name = "langres"
version = "0.1.0"
description = "A two-layer entity resolution framework with optimization, blocking, and human-in-the-loop capabilities"
readme = "README.md"
authors = [
    { name = "David Graf", email = "david@raisesquad.com" }
]
maintainers = [
    { name = "David Graf", email = "david@raisesquad.com" }
]
requires-python = ">=3.12"
dependencies = [
    "networkx>=3.5",
    "pydantic>=2.12.3",
]
keywords = [
    "entity-resolution",
    "record-linkage",
    "deduplication",
    "data-matching",
    "ml",
    "llm",
]
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]

[project.urls]
Repository = "https://github.com/raisesquad/langres"
Issues = "https://github.com/raisesquad/langres/issues"
Changelog = "https://github.com/raisesquad/langres/blob/main/CHANGELOG.md"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[dependency-groups]
dev = [
    "mypy>=1.18.2",
    "pre-commit>=4.3.0",
    "pytest>=8.4.2",
    "pytest-cov>=7.0.0",
    "ruff>=0.14.2",
    "types-networkx>=3.5.0.20251001",
]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-v --cov=langres --cov-report=term-missing --cov-report=html --cov-fail-under=100"
testpaths = ["tests"]
pythonpath = ["src"]
markers = [
    "slow: marks tests as slow running (e.g., embedding models, ML inference)",
    "integration: marks tests that require external API credentials or resources. DO NOT use for testcontainer database tests (fast enough for continuous testing).",
]

[tool.coverage.run]
source = ["langres"]
omit = ["*/tests/*", "*/__pycache__/*", "*/conftest.py"]
branch = true

[tool.coverage.report]
fail_under = 100
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if TYPE_CHECKING:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]
show_missing = true
skip_covered = false

[tool.mypy]
python_version = "3.12"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
explicit_package_bases = true
mypy_path = "src"
